{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/rxs/Documents/hckr/todo/App.tsx\";\nimport React, { useState } from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Task from \"./Tasks/Task\";\nexport default function App() {\n  var _this = this;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      taskText = _useState2[0],\n      settaskText = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      taskItem = _useState4[0],\n      settaskItem = _useState4[1];\n\n  var handleAddTask = function handleAddTask() {\n    Keyboard.dismiss();\n    settaskItem([].concat(_toConsumableArray(taskItem), [taskText]));\n    settaskText(null);\n  };\n\n  var completedtask = function completedtask(index) {\n    var itemCopy = _toConsumableArray(taskItem);\n\n    itemCopy.splice(index, 1);\n    settaskItem(itemCopy);\n  };\n\n  var emptyTaskHandler = function emptyTaskHandler() {\n    Alert.alert('Emptly Task Input', 'Please write something in Task', [{\n      text: 'Go Back'\n    }], {\n      cancelable: true\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    contentContainerStyle: {\n      flexGrow: 1\n    },\n    keyboardShouldPersistTaps: \"handled\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 8\n    }\n  }, React.createElement(View, {\n    style: styles.taskWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.appTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 10\n    }\n  }, \" ToDo Task List \"), React.createElement(View, {\n    style: styles.taskItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, taskItem.map(function (item, index) {\n    return React.createElement(TouchableOpacity, {\n      key: index,\n      onPress: function onPress() {\n        return completedtask(index);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }\n    }, React.createElement(Task, {\n      text: item,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }));\n  }), React.createElement(Task, {\n    text: \"Task 1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }\n  })))), React.createElement(KeyboardAvoidingView, {\n    behavior: Platform.OS === 'ios' ? 'padding' : 'height',\n    style: styles.writeTaskWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: 'Write a task to add',\n    value: taskText,\n    onChangeText: function onChangeText(text) {\n      return AddTaskHandler(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 8\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return handleAddTask();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.addWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.addText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, \"+\")))));\n\n  function AddTaskHandler(text) {\n    if (text == '' || text == null || text == undefined) {\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }\n      }, React.createElement(Button, {\n        title: \"Empty Task\",\n        onPress: emptyTaskHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 10\n        }\n      }));\n    }\n\n    settaskText(text);\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#E8EAED'\n  },\n  taskWrapper: {\n    paddingTop: 80,\n    paddingHorizontal: 20\n  },\n  appTitle: {\n    fontSize: 24,\n    fontWeight: 'bold'\n  },\n  taskItem: {\n    marginTop: 30\n  },\n  writeTaskWrapper: {\n    position: 'absolute',\n    bottom: 60,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center'\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    width: 250,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    borderColor: '#C0C0C0',\n    borderWidth: 1\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1\n  },\n  addText: {}\n});","map":{"version":3,"sources":["/home/rxs/Documents/hckr/todo/App.tsx"],"names":["React","useState","Task","App","taskText","settaskText","taskItem","settaskItem","handleAddTask","Keyboard","dismiss","completedtask","index","itemCopy","splice","emptyTaskHandler","Alert","alert","text","cancelable","styles","container","flexGrow","taskWrapper","appTitle","map","item","Platform","OS","writeTaskWrapper","input","AddTaskHandler","addWrapper","addText","undefined","StyleSheet","create","flex","backgroundColor","paddingTop","paddingHorizontal","fontSize","fontWeight","marginTop","position","bottom","width","flexDirection","justifyContent","alignItems","paddingVertical","borderRadius","borderColor","borderWidth","height"],"mappings":"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","sourcesContent":["\n\nimport { StatusBar } from 'expo-status-bar';\nimport React ,{ useState} from 'react';\nimport { KeyboardAvoidingView, StyleSheet, Text, View, TextInput, TouchableOpacity, Keyboard, ScrollView, Platform,Button, Alert } from 'react-native';\nimport Task from \"./Tasks/Task\";\n\nexport default function App() {\n   const [taskText, settaskText]:any | null = useState('');\n   const [taskItem, settaskItem]:any = useState([]);\n   const handleAddTask = () => {\n     Keyboard.dismiss();\n    // console.log(taskText)\n     settaskItem([...taskItem,taskText]);\n     settaskText(null);\n   }\n  const completedtask = (index:number) =>{\n    let itemCopy = [...taskItem];\n    itemCopy.splice(index,1);\n    settaskItem(itemCopy);\n  }\n\n  const emptyTaskHandler = () =>{\n    Alert.alert(\n     'Emptly Task Input',\n     'Please write something in Task',\n     [\n       {\n         text:'Go Back'\n       }\n     ],\n     {cancelable:true}\n    );\n  }\n\n\n  return (\n    <View style={styles.container}>\n       <ScrollView\n        contentContainerStyle={{\n          flexGrow: 1\n        }}\n        keyboardShouldPersistTaps='handled'\n      >\n      <View style={styles.taskWrapper}>\n         <Text style={styles.appTitle}> ToDo Task List </Text>\n          <View style={styles.taskItem}>\n                  {\n                    taskItem.map((item:string,index:number) =>{\n                 return  (\n                    <TouchableOpacity key={index} onPress={()=> completedtask(index)}>\n                    <Task text={item}/>\n                    </TouchableOpacity>\n                  )}\n                  )\n                }\n                  <Task text='Task 1'/>\n                \n          </View>\n      </View>\n      </ScrollView>\n      <KeyboardAvoidingView behavior={Platform.OS==='ios'?'padding':'height'}\n      style={styles.writeTaskWrapper}\n      >\n       <TextInput style={styles.input} placeholder={'Write a task to add'} value={taskText} onChangeText={(text)=> AddTaskHandler(text)} />\n        <TouchableOpacity onPress={()=> handleAddTask()}>\n          <View style={styles.addWrapper}>\n            <Text style={styles.addText}>+</Text>\n            </View>\n        </TouchableOpacity>\n      </KeyboardAvoidingView>\n    </View>\n  );\n\n  function AddTaskHandler(text:string) {\n    if(text =='' || text == null || text == undefined)\n    {\n       return <View style={styles.container}>\n         <Button title='Empty Task' onPress={emptyTaskHandler} />\n       </View>\n    }\n    settaskText(text);\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#E8EAED',\n  },\n  taskWrapper:{\n    paddingTop:80,\n    paddingHorizontal:20\n  },\n  appTitle:{\n      fontSize: 24,\n      fontWeight: 'bold'\n  },\n  taskItem:{\n    marginTop:30\n  },\n  writeTaskWrapper:{\n    position:'absolute',\n    bottom:60,\n    width:'100%',\n    flexDirection:'row',\n    justifyContent:'space-around',\n    alignItems:'center'\n  },\ninput:{\n  paddingVertical:15,\n  paddingHorizontal:15,\n  width:250,\n  backgroundColor:'#FFF',\n  borderRadius:60,\n  borderColor:'#C0C0C0',\n  borderWidth:1\n},\naddWrapper:{\n  width: 60,\n  height: 60,\n  backgroundColor: '#FFF',\n  borderRadius: 60,\n  justifyContent: 'center',\n  alignItems: 'center',\n  borderColor: '#C0C0C0',\n  borderWidth: 1,\n},\naddText:{\n},\n});\n"]},"metadata":{},"sourceType":"module"}